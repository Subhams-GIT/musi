generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  provider Provider
  role     Role
  name     String?
  addedStreams Stream[] @relation("addedBy")
  hostedSpaces  Space[]  @relation("hostedBy")
   joinedSpaces  Space[]  @relation("spaceParticipants")
  upvote   Upvote[]
  Stream   Stream[]
}

model Stream {
  id             String         @id @default(uuid())
  type           StreamType
  active         Boolean
  upvotes        Int
  userId         String
  extractedId    String
  url            String
  largeThumbnail String         @default("")
  smallThumbnail String         @default("")
  title          String         @default("")
  user           User           @relation(fields: [userId], references: [id])
  played         Boolean        @default(false)
  playedTs       DateTime?
  createdAt      DateTime       @default(now())
  currentStream  CurrentStream?
  addedBy        String
  addedByUser    User           @relation("addedBy", fields: [addedBy], references: [id])
  spaceId        String?
  space          Space?         @relation("spaceStreams", fields: [spaceId], references: [id], onDelete: Cascade)
}

model CurrentStream {
  id       String  @id @default(uuid())
  userId   String
  streamId String? @unique
  stream   Stream? @relation(fields: [streamId], references: [id])
  spaceId  String? @unique
  space    Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Space {
  id            String         @id @default(uuid())
  name          String
  description   String
  streams       Stream[]       @relation("spaceStreams")
  hostId        String
  host          User           @relation("hostedBy", fields: [hostId], references: [id])
  isActive      Boolean        @default(true)
  currentStream CurrentStream?
  participants  User[]         @relation("spaceParticipants") // âœ… same name as in User
}

model Upvote {
  id       String @id @default(uuid())
  userId   String
  streamId String
  user     User   @relation(fields: [userId], references: [id])

  @@unique([userId, streamId])
}

enum StreamType {
  Youtube
  Spotify
}

enum Role {
  Streamer
  Voter
}

enum Provider {
  Google
}
